What happens when you initialize a repository? Why do you need to do it?
	It creates the git repository out of the directory that you are in and it adds .git directory. You need to do it if you want to create a brand new git repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	 The staging area is different in that you don't make the actual changes while in the staging
	 directory, nor is it the place that you make snapshots of. It's where you get to organize
	 and categorize which files get to belong to any particular commit.

How can you use the staging area to make sure you have one commit per logical
change?
	If you have you multiple logical changes in your working directory,
	you have to make sure that the changes you add to the staging area are for
	one logical commit only. Then you commit those changes and repeat for
	each logical commit you have made. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	One situation would be when you're developing a new experimental feature. Another 
	situation could be when you want to create a version that is used only for testing.

How do the diagrams help you visualize the branch structure?
	Diagrams help us visualize linear vs nonlinear commit history, understanding which commits are
	reachable and not reachable at any given starting point, and how to tell if our
	commits will be retained.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	The result of merging two branches is the creation of a single version that contains
	all the changes from both branches. We represent them because the merged version
	represents the combining of the two branches; thus in the diagram the branches are combined
	into one branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
	Pros of automatic merging: Less time/effort spent to merge; 
	alerts you of specific conflicts so you have the chance to review / discuss them with others.
	Cons of automatic merging: Have to resolve conflicts from time to time; 
		less oversight of the merging process could potentially lead to unintentional
		consequences
		
	Pros of merging manually: More oversight of what will be the end result;
	allows you to review each and every change that will go into the merged version
		
	Cons of merging manually: Prone to human error (such as typos);
		uses more time/effort
		
	
