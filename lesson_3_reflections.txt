When would you want to use a remote repository rather than keeping all your work local?
When you are working with other people on the same repository or when you are working on the same repository from different computers. Using a remote repository makes it easy for everyone to access the most up-to-date version because it is available via a URL.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
If you're developing a new feature or change, you might want not want Git to automatically update your local repository with changes that might conflict with your own changes. It may be better for you to decide when it is a good time to pull new commits to your local repository.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Forks are a GitHub-specific feature that allows you to make a clone of somebody else's GitHub repository directly on the GitHub server and have it under your own account. You use a fork when you want to make a change to the content in someone's repository and share your modified version with others, but the original content owner doesn't want you to make any changes to their original repository. A clone is a copy of an existing repository. It could be making a copy of a remote repository onto your local machine or making a copy of a local repository to another location on your computer. You do this if you're trying to making a ocpy of a repository in which you have permission to push to (such as your own repository). A branch is a version that you make on the same repository. It is used when you're making an experimental feature or making some change that you don't want to yet appear in the master or any other branch.

What is the benefit of having a copy of the last known state of the remote stored locally?
It lets you have a copy of the latest changes so that you have a chance to review them, without having to combine any commits right away. That way, you can leave your local commits intact before you decide whether to merge the remote branch and your branch together.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
I would use a combination of SVN and email / verbal communication. Using Git and GitHub would probably be easier because the version control and collaboration aspects are integrated in one platform instead of using two different platforms separately. GitHub's collaboration tools would probably contribute to more organized and structured collobration and development, allowing for an orderly request / feedback / response interaction.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
You woult want to make changes on a separate branch rather than in master when you and multiple other people are working on the same repository, and it can become easy to break code functionality when everyone is making changes to the same branch without any peer review. Therefore, it may be useful to have any experimenal/development changes on non-main branches, while only stable, peer-reviewed changes are allowed on the main branch. The benefit of this is that it makes it easy for any developer to be able to get a working copy of the main branch to start off with. The benefit of making changes directly in the master branch is that this involves fewer steps and probably is sufficient when working on a repository by yourself.

